----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    12:50:50 02/26/2024 
-- Design Name: 
-- Module Name:    ruta - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.std_logic_unsigned.all;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity ruta is
    Port ( clk : in  STD_LOGIC;
           clr : in  STD_LOGIC;
           rd : in  STD_LOGIC_VECTOR (1 downto 0);
           rr : in  STD_LOGIC_VECTOR (1 downto 0);
           s : in  STD_LOGIC;
           D : in  STD_LOGIC_VECTOR (3 downto 0);
           R : in  STD_LOGIC_VECTOR (3 downto 0);
           suma : out  STD_LOGIC_VECTOR (3 downto 0);
           N : out  STD_LOGIC;
           Z : out  STD_LOGIC;
           C : out  STD_LOGIC);
end ruta;

architecture Behavioral of ruta is
	component  registro is
    Port ( clk : in  STD_LOGIC;
           clr : in  STD_LOGIC;
           S : in  STD_LOGIC_VECTOR (1 downto 0);
           I : in  STD_LOGIC_VECTOR (3 downto 0);
           Q : out  STD_LOGIC_VECTOR (3 downto 0));
end component;

signal mux_aux: std_logic_vector(3 downto 0);
signal d_aux,r_aux,suma_aux: std_logic_vector(4 downto 0);

begin
	d_aux(4) <= '0';
	r_aux(4) <= '0'; 

	mux_aux <= D when s = '0' else
			suma_aux(3 downto 0);
		
	suma_aux <= d_aux + r_aux;
	
reg_d: registro port map(clk=> clk,clr => clr,S => rd,I => mux_aux,Q => d_aux(3 downto 0));	
reg_r: registro port map(clk => clk,clr => clr,S => rr,I => R ,Q => r_aux(3 downto 0));

suma <= suma_aux(3 downto 0);

N <=  suma_aux(3);
Z <= not(suma_aux(3) or suma_aux(2) or suma_aux(1) or suma_aux(0));

C <= suma_aux(4);

end Behavioral;

